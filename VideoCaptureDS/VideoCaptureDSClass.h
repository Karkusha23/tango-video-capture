/*----- PROTECTED REGION ID(VideoCaptureDSClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        VideoCaptureDSClass.h
//
// description : Include for the VideoCaptureDS root class.
//               This class is the singleton class for
//                the VideoCaptureDS device class.
//               It contains all properties and methods which the 
//               VideoCaptureDS requires only once e.g. the commands.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef VideoCaptureDSClass_H
#define VideoCaptureDSClass_H

#include <tango.h>
#include <VideoCaptureDS.h>


/*----- PROTECTED REGION END -----*/	//	VideoCaptureDSClass.h


namespace VideoCaptureDS_ns
{
/*----- PROTECTED REGION ID(VideoCaptureDSClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	VideoCaptureDSClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute Jpeg class definition
class JpegAttrib: public Tango::Attr
{
public:
	JpegAttrib():Attr("Jpeg",
			Tango::DEV_ENCODED, Tango::READ) {};
	~JpegAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VideoCaptureDS *>(dev))->read_Jpeg(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VideoCaptureDS *>(dev))->is_Jpeg_allowed(ty);}
};

//	Attribute ContourInfo class definition
class ContourInfoAttrib: public Tango::Attr
{
public:
	ContourInfoAttrib():Attr("ContourInfo",
			Tango::DEV_ENCODED, Tango::READ) {};
	~ContourInfoAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VideoCaptureDS *>(dev))->read_ContourInfo(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VideoCaptureDS *>(dev))->is_ContourInfo_allowed(ty);}
};

//	Attribute Threshold class definition
class ThresholdAttrib: public Tango::Attr
{
public:
	ThresholdAttrib():Attr("Threshold",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~ThresholdAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VideoCaptureDS *>(dev))->read_Threshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<VideoCaptureDS *>(dev))->write_Threshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VideoCaptureDS *>(dev))->is_Threshold_allowed(ty);}
};

//	Attribute Ruler class definition
class RulerAttrib: public Tango::Attr
{
public:
	RulerAttrib():Attr("Ruler",
			Tango::DEV_ENCODED, Tango::READ_WRITE) {};
	~RulerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VideoCaptureDS *>(dev))->read_Ruler(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<VideoCaptureDS *>(dev))->write_Ruler(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VideoCaptureDS *>(dev))->is_Ruler_allowed(ty);}
};

//	Attribute MinContourArea class definition
class MinContourAreaAttrib: public Tango::Attr
{
public:
	MinContourAreaAttrib():Attr("MinContourArea",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~MinContourAreaAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VideoCaptureDS *>(dev))->read_MinContourArea(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<VideoCaptureDS *>(dev))->write_MinContourArea(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VideoCaptureDS *>(dev))->is_MinContourArea_allowed(ty);}
};

//	Attribute Frame class definition
class FrameAttrib: public Tango::ImageAttr
{
public:
	FrameAttrib():ImageAttr("Frame",
			Tango::DEV_UCHAR, Tango::READ, 3840, 720) {};
	~FrameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VideoCaptureDS *>(dev))->read_Frame(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VideoCaptureDS *>(dev))->is_Frame_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Capture class definition
class CaptureClass : public Tango::Command
{
public:
	CaptureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	CaptureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~CaptureClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<VideoCaptureDS *>(dev))->is_Capture_allowed(any);}
};

//	Command Reconnect class definition
class ReconnectClass : public Tango::Command
{
public:
	ReconnectClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReconnectClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReconnectClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<VideoCaptureDS *>(dev))->is_Reconnect_allowed(any);}
};


/**
 *	The VideoCaptureDSClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  VideoCaptureDSClass : public Tango::DeviceClass
#else
class VideoCaptureDSClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(VideoCaptureDSClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDSClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static VideoCaptureDSClass *init(const char *);
		static VideoCaptureDSClass *instance();
		~VideoCaptureDSClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		VideoCaptureDSClass(string &);
		static VideoCaptureDSClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	VideoCaptureDS_H
