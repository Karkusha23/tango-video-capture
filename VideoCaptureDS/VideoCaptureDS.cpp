/*----- PROTECTED REGION ID(VideoCaptureDS.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        VideoCaptureDS.cpp
//
// description : C++ source for the VideoCaptureDS class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               VideoCaptureDS are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <VideoCaptureDS.h>
#include <VideoCaptureDSClass.h>

/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS.cpp

/**
 *  VideoCaptureDS class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Capture       |  capture
//  Reconnect     |  reconnect
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Jpeg         |  Tango::DevEncoded	Scalar
//  ContourInfo  |  Tango::DevEncoded	Scalar
//  Threshold    |  Tango::DevUShort	Scalar
//  Ruler        |  Tango::DevEncoded	Scalar
//  Frame        |  Tango::DevUChar	Image  ( max = 3840 x 720)
//================================================================

namespace VideoCaptureDS_ns
{
/*----- PROTECTED REGION ID(VideoCaptureDS::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : VideoCaptureDS::VideoCaptureDS()
 *	Description : Constructors for a Tango device
 *                implementing the classVideoCaptureDS
 */
//--------------------------------------------------------
VideoCaptureDS::VideoCaptureDS(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(VideoCaptureDS::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::constructor_1
}
//--------------------------------------------------------
VideoCaptureDS::VideoCaptureDS(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(VideoCaptureDS::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::constructor_2
}
//--------------------------------------------------------
VideoCaptureDS::VideoCaptureDS(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(VideoCaptureDS::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : VideoCaptureDS::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void VideoCaptureDS::delete_device()
{
	DEBUG_STREAM << "VideoCaptureDS::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::delete_device) ENABLED START -----*/

	stop_cam_thread();

	//delete cv_cam;
	//delete image_no_image;
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::delete_device
	delete[] attr_Jpeg_read;
	delete[] attr_ContourInfo_read;
	delete[] attr_Threshold_read;
	delete[] attr_Ruler_read;
	delete[] attr_Frame_read;
}

//--------------------------------------------------------
/**
 *	Method      : VideoCaptureDS::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void VideoCaptureDS::init_device()
{
	DEBUG_STREAM << "VideoCaptureDS::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Jpeg_read = new Tango::DevEncoded[1];
	attr_ContourInfo_read = new Tango::DevEncoded[1];
	attr_Threshold_read = new Tango::DevUShort[1];
	attr_Ruler_read = new Tango::DevEncoded[1];
	attr_Frame_read = new Tango::DevUChar[3840*720];
	/*----- PROTECTED REGION ID(VideoCaptureDS::init_device) ENABLED START -----*/

	//cv_cam = nullptr;
	//image_no_image = nullptr;
	camThread = nullptr;

	update_cv_cam();

	*attr_Threshold_read = threshold;

	attr_Ruler_read->encoded_data.length(sizeof(vc::Ruler));
	ruler = reinterpret_cast<vc::Ruler*>(attr_Ruler_read->encoded_data.NP_data());
	ruler->start = ruler->end = cv::Point(0, 0);
	ruler->length = 0.0;

	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::init_device
}

//--------------------------------------------------------
/**
 *	Method      : VideoCaptureDS::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void VideoCaptureDS::get_device_property()
{
	/*----- PROTECTED REGION ID(VideoCaptureDS::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Source"));
	dev_prop.push_back(Tango::DbDatum("Mode"));
	dev_prop.push_back(Tango::DbDatum("Height"));
	dev_prop.push_back(Tango::DbDatum("Width"));
	dev_prop.push_back(Tango::DbDatum("JpegQuality"));
	dev_prop.push_back(Tango::DbDatum("Threshold"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on VideoCaptureDSClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		VideoCaptureDSClass	*ds_class =
			(static_cast<VideoCaptureDSClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Source from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  source;
		else {
			//	Try to initialize Source from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  source;
		}
		//	And try to extract Source value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  source;

		//	Try to initialize Mode from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mode;
		else {
			//	Try to initialize Mode from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mode;
		}
		//	And try to extract Mode value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mode;

		//	Try to initialize Height from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  height;
		else {
			//	Try to initialize Height from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  height;
		}
		//	And try to extract Height value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  height;

		//	Try to initialize Width from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  width;
		else {
			//	Try to initialize Width from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  width;
		}
		//	And try to extract Width value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  width;

		//	Try to initialize JpegQuality from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  jpegQuality;
		else {
			//	Try to initialize JpegQuality from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  jpegQuality;
		}
		//	And try to extract JpegQuality value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  jpegQuality;

		//	Try to initialize Threshold from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  threshold;
		else {
			//	Try to initialize Threshold from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  threshold;
		}
		//	And try to extract Threshold value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  threshold;

	}

	/*----- PROTECTED REGION ID(VideoCaptureDS::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : VideoCaptureDS::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void VideoCaptureDS::always_executed_hook()
{
	DEBUG_STREAM << "VideoCaptureDS::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : VideoCaptureDS::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void VideoCaptureDS::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "VideoCaptureDS::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : VideoCaptureDS::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void VideoCaptureDS::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "VideoCaptureDS::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Jpeg related method
 *	Description: 
 *
 *	Data type:	Tango::DevEncoded
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VideoCaptureDS::read_Jpeg(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VideoCaptureDS::read_Jpeg(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::read_Jpeg) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Jpeg_read);
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::read_Jpeg
}
//--------------------------------------------------------
/**
 *	Read attribute ContourInfo related method
 *	Description: 
 *
 *	Data type:	Tango::DevEncoded
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VideoCaptureDS::read_ContourInfo(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VideoCaptureDS::read_ContourInfo(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::read_ContourInfo) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ContourInfo_read);
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::read_ContourInfo
}
//--------------------------------------------------------
/**
 *	Read attribute Threshold related method
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VideoCaptureDS::read_Threshold(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VideoCaptureDS::read_Threshold(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::read_Threshold) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Threshold_read);
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::read_Threshold
}
//--------------------------------------------------------
/**
 *	Write attribute Threshold related method
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VideoCaptureDS::write_Threshold(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "VideoCaptureDS::write_Threshold(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevUShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(VideoCaptureDS::write_Threshold) ENABLED START -----*/
	
	*attr_Threshold_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::write_Threshold
}
//--------------------------------------------------------
/**
 *	Read attribute Ruler related method
 *	Description: 
 *
 *	Data type:	Tango::DevEncoded
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VideoCaptureDS::read_Ruler(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VideoCaptureDS::read_Ruler(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::read_Ruler) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Ruler_read);
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::read_Ruler
}
//--------------------------------------------------------
/**
 *	Write attribute Ruler related method
 *	Description: 
 *
 *	Data type:	Tango::DevEncoded
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VideoCaptureDS::write_Ruler(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "VideoCaptureDS::write_Ruler(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevEncoded	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(VideoCaptureDS::write_Ruler) ENABLED START -----*/
	
	std::memcpy(attr_Ruler_read->encoded_data.NP_data(), w_val.encoded_data.NP_data(), sizeof(vc::Ruler));

	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::write_Ruler
}
//--------------------------------------------------------
/**
 *	Read attribute Frame related method
 *	Description: 
 *
 *	Data type:	Tango::DevUChar
 *	Attr type:	Image max = 3840 x 720
 */
//--------------------------------------------------------
void VideoCaptureDS::read_Frame(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VideoCaptureDS::read_Frame(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::read_Frame) ENABLED START -----*/
	//	Set the attribute value

	attr.set_value(attr_Frame_read, cam_mode == vc::CameraMode::Grayscale ? width : width * 3, height);
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::read_Frame
}

//--------------------------------------------------------
/**
 *	Method      : VideoCaptureDS::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void VideoCaptureDS::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(VideoCaptureDS::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Capture related method
 *	Description: Captures image from webcam
 *
 */
//--------------------------------------------------------
void VideoCaptureDS::capture()
{
	DEBUG_STREAM << "VideoCaptureDS::Capture()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::capture) ENABLED START -----*/

	if (cam_mode == vc::CameraMode::None)
	{
		return;
	}

	std::vector<vc::ContourInfo> contours;

	std::atomic_bool status = ATOMIC_VAR_INIT(false);

	DEBUG_STREAM << "VideoCaptureDS: Passing capture query to thread" << std::endl;

	camThread->capture(&image_to_show, &jpeg, &contours, ruler, cam_mode, std::max(0, std::min(100, (int)jpegQuality)), *attr_Threshold_read, &status);

	while (!status)
	{

	}

	DEBUG_STREAM << "VideoCaptureDS: Getting response from thread" << std::endl;

	size_t size = image_to_show.total() * image_to_show.elemSize() * sizeof(uchar);

	if (size <= 3840 * 720)
	{
		std::memcpy(attr_Frame_read, image_to_show.data, size);
		push_change_event("Frame", attr_Frame_read, cam_mode == vc::CameraMode::Grayscale ? width : width * 3, height);
	}

	attr_Jpeg_read->encoded_data.length(jpeg.size() * sizeof(unsigned char));
	std::memcpy(attr_Jpeg_read->encoded_data.NP_data(), jpeg.data(), jpeg.size() * sizeof(unsigned char));

	push_change_event("Jpeg", attr_Jpeg_read);

	size_t contours_size = contours.size() * sizeof(vc::ContourInfo);
	attr_ContourInfo_read->encoded_data.length(contours_size);
	std::memcpy(attr_ContourInfo_read->encoded_data.NP_data(), contours.data(), contours_size);

	push_change_event("ContourInfo", attr_ContourInfo_read);

	DEBUG_STREAM << "VideoCaptureDS: End of capture command" << std::endl;

	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::capture
}
//--------------------------------------------------------
/**
 *	Command Reconnect related method
 *	Description: Reconnect to webcam
 *
 */
//--------------------------------------------------------
void VideoCaptureDS::reconnect()
{
	DEBUG_STREAM << "VideoCaptureDS::Reconnect()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(VideoCaptureDS::reconnect) ENABLED START -----*/

	get_device_property();
	update_cv_cam();

	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::reconnect
}
//--------------------------------------------------------
/**
 *	Method      : VideoCaptureDS::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void VideoCaptureDS::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(VideoCaptureDS::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::add_dynamic_commands
}

/*----- PROTECTED REGION ID(VideoCaptureDS::namespace_ending) ENABLED START -----*/

/*void VideoCaptureDS::execute_capture(cv::Mat* image, Tango::EncodedAttribute* jpeg)
{
	cv::Mat image_cam;

	if (get_state() == Tango::FAULT || !cv_cam || !cv_cam->isOpened())
	{
		image = image_no_image;
	}
	else
	{
		cv_cam->read(image_cam);

		image = image_cam.empty() ? image_no_image : &image_cam;
	}

	cv::Mat image_converted;
	cv::Mat image_to_jpeg;

	switch (cam_mode)
	{
	case CameraMode::RGB:
		cv::cvtColor(*image, image_converted, cv::COLOR_BGR2RGB);
		cv::cvtColor(*image, image_to_jpeg, cv::COLOR_BGR2RGBA);
		jpeg->encode_jpeg_rgb32(image_to_jpeg.data, width, height, std::max(1.0, std::min(100.0, double(jpegQuality))));
		image = &image_converted;
		break;
	case CameraMode::BGR:
		cv::cvtColor(*image, image_to_jpeg, cv::COLOR_BGR2BGRA);
		jpeg->encode_jpeg_rgb32(image_to_jpeg.data, width, height, std::max(1.0, std::min(100.0, double(jpegQuality))));
		break;
	case CameraMode::Grayscale:
		cv::cvtColor(*image, image_converted, cv::COLOR_BGR2GRAY);
		jpeg->encode_jpeg_gray8(image_converted.data, width, height, std::max(1.0, std::min(100.0, double(jpegQuality))));
		image = &image_converted;
		break;
	default:
		break;
	}
}*/

void VideoCaptureDS::stop_cam_thread()
{
	if (!camThread)
	{
		return;
	}

	DEBUG_STREAM << "VideoCaptureDS: Passing stop query to thread" << std::endl;

	camThread->stop();

	void* ptr;

	DEBUG_STREAM << "VideoCaptureDS: Waiting for thread to exit" << std::endl;

	camThread->join(&ptr);

	DEBUG_STREAM << "VideoCaptureDS: Thread stopped" << std::endl;

	delete camThread;
}

void VideoCaptureDS::update_cv_cam()
{
	stop_cam_thread();

	if (mode == "RGB" || mode == "rgb")
	{
		cam_mode = vc::CameraMode::RGB;
	}
	else if (mode == "BGR" || mode == "bgr")
	{
		cam_mode = vc::CameraMode::BGR;
	}
	else if (mode == "Grayscale" || mode == "grayscale")
	{
		cam_mode = vc::CameraMode::Grayscale;
	}
	else
	{
		cam_mode = vc::CameraMode::None;
		set_state(Tango::FAULT);
	}

	if (get_state() != Tango::FAULT)
	{
		DEBUG_STREAM << "VideoCaptureDS: Creating new thread" << std::endl;

		camThread = new CamCaptureThread(this, source, width, height);

		DEBUG_STREAM << "VideoCaptureDS: New thread created" << std::endl;

		if (camThread->is_failed())
		{
			set_state(Tango::FAULT);
			return;
		}
	}

	set_state(Tango::ON);
}
// //--------------------------------------------------------
// /**
//  *	Read attribute Contours related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEncoded
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void VideoCaptureDS::read_Contours(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "VideoCaptureDS::read_Contours(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_Contours_read, 100);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute Ruler related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEncoded
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void VideoCaptureDS::read_Ruler(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "VideoCaptureDS::read_Ruler(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_Ruler_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute Ruler related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevEncoded
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void VideoCaptureDS::write_Ruler(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "VideoCaptureDS::write_Ruler(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevEncoded	w_val;
// 	attr.get_write_value(w_val);
// 	
// 	
// }


/*----- PROTECTED REGION END -----*/	//	VideoCaptureDS::namespace_ending
} //	namespace
